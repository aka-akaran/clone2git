#demo

git remote add origin 'ssh address' : connect with the repository

git remote -v : listdown the repositiory which have linked to that ssh address

git push origin master : push the directory to the git

git push -u origin master : sets the origin master as the default directory to push, we can now only say git push

git branch : tell the branch property

* : u are currently on that branch

git checkout -b 'branchName' : create and switch to new branch

git diff 'branchName' : Tells the diff between the master branch and some branch

git merge : if your curr branch is master branch then merges the other branchs to the master branch

what we must do?
We first go to the child branch,
Check the status, if nothing to commit push it to git,

But here we need to specify that we need to push to which branch
means we have to tell it's parent branch
we can do so by folloing command
git push --set-upstream origin 'childBranchName'
or
git push -u origin 'childBranchName'
or
git push then it will suggest the command automatically

Then send a pull request.

Pull Request : ask for the request to pull/merge child branch to master branch
When we send a pull request anybody can review our file and suggest changes
We can commit changes to the branch add comments and much more.

git pull origin master : pull the changes to the local repositiory
git branch -d 'branch branchName' : delete the particular branch


'updating the same line as of "tempBranch", Now git has to decide which line to have when 'tempBranch' pull request to merge to master branch.
//error: Your local changes to the following files would be overwritten by checkout:
        commands.txt
Please commit your changes or stash them before you switch branches.
Aborting

Therefore, you don't get to switch to the 'tempBranch'
until you commit/ stash the master branch.









git commit -am "some-text" : this command adds and message at the same time, but only works for the files which are modified
//if u are adding it to the first time then it does not work.

//creating same line conflict
//We can create stash but for now we are commiting, 
//We will look for the stash later on.

git reset 'filename' : unstage the last changes to a particular file
git reset : unstage all files to the previous stage
//helps in undoing the file if accidentally I commited something
//that I don't wanted to commit

git reset HEAD~'steps' : reset the last committed file in the head of the tree
by the value of steps, steps can be any integer value.

git log : shows the logs/list of all the committed stages
git reset 'hashValue' : reset to the stage with that hash value onto the git repositiory
git reset --hard 'hashValue : reset to the stage locally in the files.
